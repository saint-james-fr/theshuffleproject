import { YouTubeScraper } from './scraper'
import { CSVWriter } from './csv-writer'
import { VideoData } from './types'
import { deduplicateVideos } from './utils'
import * as path from 'path'

const albumPlaylistScrapingMain = async (): Promise<void> => {
  console.log('üéµ Larry Heard Album & Playlist Explorer')
  console.log('=' .repeat(60))
  
  const scraper = new YouTubeScraper()
  const csvWriter = new CSVWriter(path.join(__dirname, '../data/larry-heard-albums-playlists.csv'))
  
  const allVideos: VideoData[] = []
  
  // Specific high-quality playlists and album searches
  const playlistQueries = [
    'Larry Heard albums',
    'Larry Heard discography',
    'Mr Fingers albums',
    'Larry Heard complete',
    'Larry Heard collection',
    'Larry Heard best of',
    'Mr Fingers discography',
    'Larry Heard essential',
    'Fingers Inc albums',
    'Larry Heard greatest hits',
    'Mr Fingers best tracks',
    'Larry Heard compilation'
  ]
  
  // Known high-quality playlists (you can add more as you discover them)
  const specificPlaylists = [
    'https://www.youtube.com/playlist?list=PLsfO53doee0fzd6hDScc13_DNiCXbKHl8', // Your original playlist
    // Add more specific playlists here as you find them
  ]
  
  try {
    // Step 1: Add specific known playlists
    console.log('‚ûï Adding specific known playlists...')
    specificPlaylists.forEach(playlist => {
      scraper.addSpecificPlaylist(playlist)
    })
    
    // Step 2: Search for album/collection playlists
    console.log('üîç Phase 1: Discovering album and collection playlists...')
    for (const query of playlistQueries) {
      console.log(`   üîç Searching: "${query}"`)
      const videos = await scraper.searchPlaylistsAndVideos(query, 30) // Fewer videos per search, focus on playlist discovery
      allVideos.push(...videos)
      
      // Small delay between searches
      await new Promise(resolve => setTimeout(resolve, 1500))
    }
    
    const discoveredPlaylists = scraper.getDiscoveredPlaylists()
    console.log(`üìä Videos from searches: ${allVideos.length}`)
    console.log(`üìã Total discovered playlists: ${discoveredPlaylists.length}`)
    
    // Show discovered playlists
    if (discoveredPlaylists.length > 0) {
      console.log('\\nüìã All Discovered Playlists:')
      discoveredPlaylists.forEach((playlistId, index) => {
        console.log(`   ${index + 1}. https://www.youtube.com/playlist?list=${playlistId}`)
      })
      console.log()
    }
    
    // Step 3: Scrape all discovered playlists
    console.log('üéµ Phase 2: Scraping all discovered playlists...')
    const playlistVideos = await scraper.scrapeAllDiscoveredPlaylists(50) // More videos per playlist
    allVideos.push(...playlistVideos)
    
    console.log(`üìä Videos from playlists: ${playlistVideos.length}`)
    console.log(`üìä Total videos before deduplication: ${allVideos.length}`)
    
    // Step 4: Remove duplicates
    const uniqueVideos = deduplicateVideos(allVideos)
    console.log(`üîÑ Removed ${allVideos.length - uniqueVideos.length} duplicates`)
    console.log(`üìπ Final count: ${uniqueVideos.length} unique videos`)
    
    // Step 5: Write to CSV
    await csvWriter.writeVideos(uniqueVideos)
    
    console.log('=' .repeat(60))
    console.log(`‚úÖ Album & Playlist scraping completed successfully!`)
    console.log(`üìÅ Data saved to: ${path.join(__dirname, '../data/larry-heard-albums-playlists.csv')}`)
    console.log(`üìä Total unique videos: ${uniqueVideos.length}`)
    console.log(`üìã Playlists scraped: ${discoveredPlaylists.length}`)
    
    // Show some sample results
    console.log('\\nüéµ Sample videos found:')
    uniqueVideos.slice(0, 10).forEach((video, index) => {
      console.log(`${index + 1}. ${video.title}`)
      console.log(`   üîó ${video.url}`)
      console.log(`   üì∫ Channel: ${video.channel}`)
      console.log()
    })
    
    // Show breakdown by search type
    console.log('üîç Search queries used for playlist discovery:')
    playlistQueries.forEach((query, index) => {
      console.log(`   ${index + 1}. "${query}"`)
    })
    
    console.log('\\nüìã Final playlist collection:')
    discoveredPlaylists.forEach((playlistId, index) => {
      console.log(`   ${index + 1}. https://www.youtube.com/playlist?list=${playlistId}`)
    })
    
    // Show stats
    console.log('\\nüìä Collection Statistics:')
    console.log(`   üéµ Total unique videos: ${uniqueVideos.length}`)
    console.log(`   üìã Playlists discovered: ${discoveredPlaylists.length}`)
    console.log(`   üîç Search queries used: ${playlistQueries.length}`)
    console.log(`   ‚ûï Manual playlists added: ${specificPlaylists.length}`)
    
  } catch (error) {
    console.error('‚ùå Album & Playlist scraping failed:', error instanceof Error ? error.message : 'Unknown error')
    process.exit(1)
  }
}

// Run the album/playlist scraper
if (require.main === module) {
  albumPlaylistScrapingMain().catch(error => {
    console.error('‚ùå Fatal error:', error)
    process.exit(1)
  })
}

export { albumPlaylistScrapingMain }
